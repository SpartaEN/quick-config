server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name example.com;

    access_log  /srv/http/example.com/logs/access.log  main;
    error_log   /srv/http/example.com/logs/error.log;

    # Uncomment if you are using cloudflare, set realip
    #set_real_ip_from 103.21.244.0/22;
    #set_real_ip_from 103.22.200.0/22;
    #set_real_ip_from 103.31.4.0/22;
    #set_real_ip_from 104.16.0.0/12;
    #set_real_ip_from 108.162.192.0/18;
    #set_real_ip_from 131.0.72.0/22;
    #set_real_ip_from 141.101.64.0/18;
    #set_real_ip_from 162.158.0.0/15;
    #set_real_ip_from 172.64.0.0/13;
    #set_real_ip_from 173.245.48.0/20;
    #set_real_ip_from 188.114.96.0/20;
    #set_real_ip_from 190.93.240.0/20;
    #set_real_ip_from 197.234.240.0/22;
    #set_real_ip_from 198.41.128.0/17;
    #set_real_ip_from 2400:cb00::/32;
    #set_real_ip_from 2606:4700::/32;
    #set_real_ip_from 2803:f800::/32;
    #set_real_ip_from 2405:b500::/32;
    #set_real_ip_from 2405:8100::/32;
    #set_real_ip_from 2c0f:f248::/32;
    #set_real_ip_from 2a06:98c0::/29;
    #real_ip_header CF-Connecting-IP;

    location / {
        root   /srv/http/example.com/html;
        index  index.php index.html index.htm;
        # Uncomment to enable auth, Gen auth password `printf "USER:$(openssl passwd -crypt PASSWORD)\n" >> .htpasswd`
        #auth_basic "Restricted";
        #auth_basic_user_file /etc/nginx/.htpasswd;
        # Uncomment to enable php
        #try_files $uri $uri/ /index.php$is_args$args;
        #location ~* \.php$ {
        #    fastcgi_param HTTP_PROXY "";
        #    fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
        #    include         fastcgi_params;
        #    fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;
        #    fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;
        #}
    }

    # Custom error page
    #error_page  404              /404.html;
    #location = /404.html {
    #    root   /srv/http/example.com/error_pages;
    #}

    #error_page   500 502 503 504  /50x.html;
    #location = /50x.html {
    #    root   /srv/http/example.com/error_pages;
    #}

    # Generated by Certbot
    #ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    #include /etc/letsencrypt/options-ssl-nginx.conf;
    #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    #ssl_session_cache shared:TLS:2m;
    # Enable HSTS
    #add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains';
    #ssl_stapling on;
    #ssl_stapling_verify on;
    #resolver 8.8.8.8;

    # Uncomment if you are using cloudflare
    # Cert and key are generated from your cloudflare console
    #ssl_certificate         /etc/ssl/cloudflare/certs/cert.pem;
    #ssl_certificate_key     /etc/ssl/cloudflare/private/key.pem;
    # For dhparam.pem, you may want to generate one using `openssl dhparam -out /etc/ssl/dhparams.pem 2048` 
    #ssl_dhparam             /etc/ssl/cloudflare/dh/dhparams.pem;
    # For cloudflare client cert, you can get from https://support.cloudflare.com/hc/en-us/articles/204899617
    #ssl_client_certificate  /etc/ssl/cloudflare/cloudflare.crt;
    #ssl_verify_client       on;
    #include /etc/nginx/ssl-config/default.conf;
    # Enable HSTS
    #ssl_session_cache shared:TLS:2m;
    #add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains';
    #resolver 8.8.8.8;


    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }
}
# Redirect to https
server {
    listen 80;

    server_name example.com;
    return 301 https://$host$request_uri;
}
